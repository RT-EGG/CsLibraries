//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace RtCs.OpenGL.Properties {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RtCs.OpenGL.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   struct GLAmbientLight_
        ///{
        ///	float ColorR;
        ///	float ColorG;
        ///	float ColorB;
        ///	float Intensity;
        ///};
        ///
        ///struct GLAmbientLight
        ///{
        ///	vec3 Color;
        ///	float Intensity;
        ///};
        ///
        ///layout (std430) readonly buffer BuiltIn_AmbientLight {
        ///	GLAmbientLight_ AmbientLight;
        ///};
        ///
        ///GLAmbientLight GetAmbientLight()
        ///{
        ///	GLAmbientLight result;
        ///	result.Color = vec3(AmbientLight.ColorR, AmbientLight.ColorG, AmbientLight.ColorB);
        ///	result.Intensity = AmbientLight.Intensity;
        ///	return result;
        ///};
        ///
        ///struct GLDirectionalLight_
        ///{
        ///	float [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BuiltIn_Light_h {
            get {
                return ResourceManager.GetString("BuiltIn_Light.h", resourceCulture);
            }
        }
        
        /// <summary>
        ///    に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BuiltIn_Math_h {
            get {
                return ResourceManager.GetString("BuiltIn_Math.h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   
        ///
        ///
        ///layout (std430) buffer BuiltIn_ViewProjectionMatrix {
        ///	vec4 WorldViewDirection;
        ///	mat4 ViewMatrix;
        ///	mat4 ProjectionMatrix;
        ///	mat4 ViewProjectionMatrix;
        ///};
        ///
        ///layout (std430) readonly buffer BuiltIn_ModelMatrix {
        ///	mat4 ModelMatrices[];
        ///};
        ///
        ///layout (std430) readonly buffer BuiltIn_ModelViewMatrix {
        ///	mat4 ModelViewMatrices[];
        ///};
        ///
        ///layout (std430) readonly buffer BuiltIn_ModelViewProjectionMatrix {
        ///	mat4 ModelViewProjectionMatrices[];
        ///};
        ///
        ///layout (std430) readonly buffer BuiltIn_NormalMatrix { [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BuiltIn_Matrix_h {
            get {
                return ResourceManager.GetString("BuiltIn_Matrix.h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   float rand(in vec2 co)
        ///{
        ///    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
        ///}
        ///
        ///float rand(in vec2 co, in float seed)
        ///{
        ///    return fract(sin(dot(co.xy ,vec2(12.9898,78.233)) * seed) * 43758.5453);
        ///}
        ///
        ///// Gold Noise ©2015 dcerisano@standard3d.com
        ///// - based on the Golden Ratio
        ///// - uniform normalized distribution
        ///// - fastest static noise generator function (also runs at low precision)
        ///// - use with indicated seeding method
        ///// https://www.shadertoy.com/view/ltB3zD
        ///float goldN [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BuiltIn_Random_h {
            get {
                return ResourceManager.GetString("BuiltIn_Random.h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///out vec4 outColor;
        ///
        ///layout (location = 0) uniform vec4 inColor;
        ///
        ///void main()
        ///{
        ///    outColor = inColor;
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Color_fragment_glsl {
            get {
                return ResourceManager.GetString("Color.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (location = 0) in vec3 inPosition;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionMatrix * ModelViewMatrix * vec4(inPosition, 1.0);	
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Color_vertex_glsl {
            get {
                return ResourceManager.GetString("Color.vertex.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///#include &lt;Light.h&gt;
        ///
        ///out vec4 outColor;
        ///
        ///layout (location = 0) uniform vec3 inAmbient;
        ///layout (location = 1) uniform vec3 inDiffuse;
        ///layout (location = 2) uniform vec3 inSpecular;
        ///layout (location = 3) uniform vec3 inEmission;
        ///layout (location = 4) uniform float inShininess;
        ///
        ///layout (location = 0) in vec3 inNormal;
        ///layout (location = 1) in vec3 inWorldSpaceNormal;
        ///layout (location = 2) in vec3 inWorldSpacePosition;
        ///
        ///void main()
        ///{
        ///    // ambient
        ///    GLAmbi [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Phong_fragment_glsl {
            get {
                return ResourceManager.GetString("Phong.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (location = 0) in vec3 inPosition;
        ///layout (location = 1) in vec3 inNormal;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///
        ///layout (location = 0) out vec3 outNormal;
        ///layout (location = 1) out vec3 outWorldSpaceNormal;
        ///layout (location = 2) out vec3 outWorldSpacePosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionMatrix * ModelViewMatrix * vec4(inPosition, 1.0);
        ///    outNormal = NormalMatrix * inNormal;
        ///    outWorldSpaceNormal = (ModelMatrix * vec4(inNo [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Phong_vertex_glsl {
            get {
                return ResourceManager.GetString("Phong.vertex.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///out vec4 outColor;
        ///
        ///layout (location = 0) in vec2 inTexCoord;
        ///layout (location = 0) uniform sampler2D inTexture;
        ///
        ///void main()
        ///{
        ///    outColor = texture(inTexture, inTexCoord);
        ///    return;
        ///}
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Texture_fragment_glsl {
            get {
                return ResourceManager.GetString("Texture.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (location = 0) in vec3 inPosition;
        ///layout (location = 1) in vec2 inTexCoord;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///layout (location = 0) out vec2 outTexCoord;
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionMatrix * ModelViewMatrix * vec4(inPosition, 1.0);
        ///    outTexCoord = inTexCoord;
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Texture_vertex_glsl {
            get {
                return ResourceManager.GetString("Texture.vertex.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///out vec4 outColor;
        ///
        ///layout (location = 0) in vec4 inColor;
        ///
        ///void main()
        ///{
        ///    outColor = inColor;
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string VertexColor_fragment_glsl {
            get {
                return ResourceManager.GetString("VertexColor.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (location = 0) in vec3 inPosition;
        ///layout (location = 1) in vec4 inColor;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///layout (location = 0) out vec4 outColor;
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionMatrix * ModelViewMatrix * vec4(inPosition, 1.0);	
        ///    outColor = inColor;
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string VertexColor_vertex_glsl {
            get {
                return ResourceManager.GetString("VertexColor.vertex.glsl", resourceCulture);
            }
        }
    }
}
