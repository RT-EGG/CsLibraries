float rand(in vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float rand(in vec2 co, in float seed)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233)) * seed) * 43758.5453);
}

// Gold Noise ©2015 dcerisano@standard3d.com
// - based on the Golden Ratio
// - uniform normalized distribution
// - fastest static noise generator function (also runs at low precision)
// - use with indicated seeding method
// https://www.shadertoy.com/view/ltB3zD
float goldNoise(in vec2 xy, in float seed)
{
    const float PHI = 1.61803398874989484820459; // phi = Golden Ratio 
    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}
