//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Snow.Properties {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Snow.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   struct LayoutParticle
        ///{
        ///	int Status;
        ///	float Radius;
        ///	float Density;
        ///	float PositionX;
        ///	float PositionY;
        ///	float PositionZ;
        ///	float VelocityX;
        ///	float VelocityY;
        ///	float VelocityZ;
        ///};
        ///
        ///struct Particle
        ///{
        ///	int Status;
        ///	float Radius;
        ///	float Density;
        ///	vec3 Position;
        ///	vec3 Velocity;
        ///};
        ///
        ///layout (std430) buffer Particle_ {
        ///	LayoutParticle[] LayoutParticles;
        ///};
        ///
        ///Particle GetParticle(int inIndex)
        ///{
        ///	LayoutParticle source = LayoutParticles[inIndex];
        ///	Particle result;
        ///	result.Status = source.S [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BuiltIn_SnowParticle_h {
            get {
                return ResourceManager.GetString("BuiltIn_SnowParticle.h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Random.h&gt;
        ///
        ///layout (binding = 0, rgba32f) uniform writeonly image2D inDstTexture;
        ///layout (location = 1) uniform float inRandomSeed;
        ///
        ///float fade(float aY0, float aY1, float aRatio)
        ///{
        ///    float ratio = (6.0 * pow(aRatio, 5.0)) - (15.0 * pow(aRatio, 4.0)) + (10.0 * pow(aRatio, 3.0));
        ///    return ((1.0 - ratio) * aY0) + (ratio * aY1);
        ///}
        ///
        ///layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
        ///void main(void)
        ///{
        ///    ivec2 dstTextureSize = imageSize(inDstTexture);        /// [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_compute_Initialize_glsl {
            get {
                return ResourceManager.GetString("SnowCover.compute.Initialize.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///    に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_compute_update_glsl {
            get {
                return ResourceManager.GetString("SnowCover.compute.update.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Light.h&gt;
        ///
        ///uniform bvec3 inChannelVisibility;
        ///uniform int inRenderMode;
        ///uniform sampler2D inSurfaceTexture;
        ///uniform vec3 inAmbient;
        ///uniform vec3 inDiffuse;
        ///layout (location = 0) in vec2 inTexCoord;
        ///layout (location = 1) in float inOffset;
        ///layout (location = 2) in vec3 inWorldPosition;
        ///layout (location = 3) in vec3 inWorldNormal;
        ///layout (location = 0) out vec4 outColor;
        ///
        ///vec3 CalcBaseShadeColor()
        ///{
        ///    GLAmbientLight ambLight = GetAmbientLight();
        ///    vec3 ambient = in [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_fragment_glsl {
            get {
                return ResourceManager.GetString("SnowCover.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///layout (vertices = 4) out;
        ///
        ///layout (location = 0) uniform float inInner;
        ///layout (location = 1) uniform float inOuter;
        ///
        ///in gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///} gl_in[gl_MaxPatchVertices];
        ///
        ///layout (location = 0) in vec3 inNormal[gl_MaxPatchVertices];
        ///layout (location = 1) in vec2 inTexCoord[gl_MaxPatchVertices];
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///} gl_out[];
        ///
        ///layout (location = 0) out vec3 outNormal[];
        ///layout (location = 1) out vec2 outTexCoord[];
        ///
        ///void main()
        ///{
        ///	gl_o [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_tess_control_glsl {
            get {
                return ResourceManager.GetString("SnowCover.tess_control.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (quads, equal_spacing, ccw) in;
        ///
        ///layout (binding = 0)  uniform sampler2D inHeightMap;
        ///layout (location = 6) uniform float inMinHeight;
        ///layout (location = 7) uniform float inMaxHeight;
        ///
        ///in gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///}gl_in[gl_MaxPatchVertices];
        ///
        ///layout (location = 0) in vec3 inNormal[gl_MaxPatchVertices];
        ///layout (location = 1) in vec2 inTexCoord[gl_MaxPatchVertices];
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///
        ///layout (location = 0) out ve [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_tess_evaluate_glsl {
            get {
                return ResourceManager.GetString("SnowCover.tess_evaluate.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///layout (location = 0) in vec3 inPosition;
        ///layout (location = 1) in vec3 inNormal;
        ///layout (location = 2) in vec2 inTexCoord;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///};
        ///
        ///layout (location = 0) out vec3 outNormal;
        ///layout (location = 1) out vec2 outTexCoord;
        ///
        ///void main()
        ///{
        ///	gl_Position = vec4(inPosition, 1.0);
        ///    outNormal   = inNormal;
        ///    outTexCoord = inTexCoord;
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowCover_vertex_glsl {
            get {
                return ResourceManager.GetString("SnowCover.vertex.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Random.h&gt;
        ///#include &lt;Particle.h&gt;
        ///
        ///vec3 CalcFieldForceAt(vec3 inPosition)
        ///{
        ///	return vec3(
        ///		sin(inPosition.x * 9.1) * sin(inPosition.y * 11.2) * sin(inPosition.z * 2.5),
        ///		0.0,
        ///		sin(inPosition.x * 25.7) * sin(inPosition.y * 18.8) * sin(inPosition.z * 27.9)
        ///	);
        ///}
        ///
        ///vec3 GetRandomGeneratePosition(int inIndex, vec3 inBoundsMin, vec3 inBoundsMax, float inSeed)
        ///{
        ///	vec2 co = vec2(inIndex * 0.5 * inSeed, inSeed);
        ///	return vec3(
        ///		mix(inBoundsMin.x, inBoundsMax.x, rand(co, inS [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowFall_compute_update_glsl {
            get {
                return ResourceManager.GetString("SnowFall.compute.update.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Light.h&gt;
        ///
        ///layout (location = 0) flat in int inDiscard;
        ///out vec4 outColor;
        ///
        ///void main()
        ///{
        ///    if (inDiscard == 0) {
        ///        discard;
        ///    }
        ///        
        ///    float len = length((gl_PointCoord - vec2(0.5, 0.5)) * 2.0);
        ///    GLAmbientLight ambLight = GetAmbientLight();
        ///    outColor.xyz = vec3(1.0) * ambLight.Color * ambLight.Intensity;
        ///    outColor.w   = 1.0 - len;
        ///
        ///    if (outColor.w &lt; 0.01) {
        ///        discard;
        ///    }
        ///    return;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowFall_fragment_glsl {
            get {
                return ResourceManager.GetString("SnowFall.fragment.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 460
        ///
        ///#include &lt;Matrix.h&gt;
        ///
        ///layout (location = 0) in int inStatus;
        ///layout (location = 1) in float inRadius;
        ///layout (location = 2) in vec3 inPosition;
        ///
        ///out gl_PerVertex
        ///{
        ///	vec4 gl_Position;
        ///    float gl_PointSize;
        ///};
        ///
        ///layout (location = 0) flat out int outDiscard;
        ///
        ///void main()
        ///{
        ///    gl_Position = ProjectionMatrix * ModelViewMatrix * vec4(inPosition, 1.0);
        ///    gl_PointSize = float(ViewportSize.y) * ProjectionMatrix[1][1] * (inRadius / gl_Position.w);
        ///    
        ///    outDiscard = inStatus  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SnowFall_vertex_glsl {
            get {
                return ResourceManager.GetString("SnowFall.vertex.glsl", resourceCulture);
            }
        }
    }
}
