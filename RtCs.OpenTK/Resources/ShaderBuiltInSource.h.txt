layout (std430) buffer BuiltIn_ViewProjectionMatrix {
	vec4 WorldViewDirection;
	mat4 ViewMatrix;
	mat4 ProjectionMatrix;
	mat4 ViewProjectionMatrix;
};

layout (std430) readonly buffer BuiltIn_ModelMatrix {
	mat4 ModelMatrices[];
};

layout (std430) readonly buffer BuiltIn_ModelViewMatrix {
	mat4 ModelViewMatrices[];
};

layout (std430) readonly buffer BuiltIn_ModelViewProjectionMatrix {
	mat4 ModelViewProjectionMatrices[];
};

layout (std430) readonly buffer BuiltIn_NormalMatrix {
	mat3 NormalMatrices[];
};

uniform int RenderInstanceID;

mat4 ModelMatrix;
mat4 ModelViewMatrix;
mat4 ModelViewProjectionMatrix;
mat3 NormalMatrix;

void ExpandBuiltInVariables()
{
	ModelMatrix = ModelMatrices[RenderInstanceID];
	ModelViewMatrix = ModelViewMatrices[RenderInstanceID];
	ModelViewProjectionMatrix = ModelViewProjectionMatrices[RenderInstanceID];
	NormalMatrix = NormalMatrices[RenderInstanceID];
};

struct GLAmbientLight_
{
	float ColorR;
	float ColorG;
	float ColorB;
	float Intensity;
};

struct GLAmbientLight
{
	vec3 Color;
	float Intensity;
};

layout (std430) readonly buffer BuiltIn_AmbientLight {
	GLAmbientLight_ AmbientLight;
};

GLAmbientLight GetAmbientLight()
{
	GLAmbientLight result;
	result.Color = vec3(AmbientLight.ColorR, AmbientLight.ColorG, AmbientLight.ColorB);
	result.Intensity = AmbientLight.Intensity;
	return result;
};

struct GLDirectionalLight_
{
	float ColorR;
	float ColorG;
	float ColorB;
	float Intensity;
	float DirectionX;
	float DirectionY;
	float DirectionZ;
};

struct GLDirectionalLight
{
	vec3 Color;
	float Intensity;
	vec3 Direction;
};

layout (std430) readonly buffer BuiltIn_DirectionalLight {	
	int DirectionalLightCount;
	GLDirectionalLight_ DirectionalLights[];
};

GLDirectionalLight GetDirectionalLight(int inIndex)
{
	GLDirectionalLight_ source = DirectionalLights[inIndex];
	GLDirectionalLight result;
	result.Color = vec3(source.ColorR, source.ColorG, source.ColorB);
	result.Intensity = source.Intensity;
	result.Direction = vec3(source.DirectionX, source.DirectionY, source.DirectionZ);
	return result;
};

struct GLPointLight_
{
	float ColorR;
	float ColorG;
	float ColorB;
	float Intensity;
	float PositionX;
	float PositionY;
	float PositionZ;	
	float DirectionX;
	float DirectionY;
	float DirectionZ;
	float Range;
};

struct GLPointLight
{
	vec3 Color;
	float Intensity;
	vec3 Position;
	vec3 Direction;
	float Range;
};

layout (std430) readonly buffer BuiltIn_PointLight {
	int PointLightCount;
	GLPointLight_ PointLights[];
};

GLPointLight GetPointLight(int inIndex)
{
	GLPointLight_ source = PointLights[inIndex];
	GLPointLight result;

	result.Color = vec3(source.ColorR, source.ColorG, source.ColorB);
	result.Intensity = source.Intensity;
	result.Position = vec3(source.PositionX, source.PositionY, source.PositionZ);
	result.Direction = vec3(source.DirectionX, source.DirectionY, source.DirectionZ);
	result.Range = source.Range;
	return result;
};

float PointLightIntensityAt(GLPointLight inLight, vec3 inPosition)
{
	if (inLight.Range <= 1.0e-5) {
		return 0.0f;
	}

	float d = length(inLight.Position - inPosition);
	if (d <= 1.0e-5) {
		return inLight.Intensity;
	}
	if (d > inLight.Range) {
		return 0.0f;
	}

	float a = d / inLight.Range;
	a = 1.0 - a;
	a = a * a;

	return a * inLight.Intensity;
};

struct GLSpotLight_
{
	float ColorR;
	float ColorG;
	float ColorB;
	float Intensity;
	float PositionX;
	float PositionY;
	float PositionZ;	
	float DirectionX;
	float DirectionY;
	float DirectionZ;
	float Range;
	float Angle;
};

struct GLSpotLight
{
	vec3 Color;
	float Intensity;
	vec3 Position;
	vec3 Direction;
	float Range;
	float Angle;
};

layout (std430) readonly buffer BuiltIn_SpotLight {
	int SpotLightCount;
	GLSpotLight_ SpotLights[];
};

GLSpotLight GetSpotLight(int inIndex)
{
	GLSpotLight_ source = SpotLights[inIndex];
	GLSpotLight result;

	result.Color = vec3(source.ColorR, source.ColorG, source.ColorB);
	result.Intensity = source.Intensity;
	result.Position = vec3(source.PositionX, source.PositionY, source.PositionZ);
	result.Direction = vec3(source.DirectionX, source.DirectionY, source.DirectionZ);
	result.Range = source.Range;
	result.Angle = source.Angle;
	return result;
};

float SpotLightIntensityAt(GLSpotLight inLight, vec3 inPosition)
{
	if (inLight.Range <= 1.0e-5) {
		return 0.0f;
	}
	if (inLight.Angle <= 1.0e-5) {
		return 0.0f;
	}

	vec3 direction = normalize(inPosition - inLight.Position);
	if (dot(direction, inLight.Direction) < cos(inLight.Angle)) {
		return 0.0f;
	}

	float d = length(inLight.Position - inPosition);
	if (d <= 1.0e-5) {
		return inLight.Intensity;
	}
	if (d > inLight.Range) {
		return 0.0f;
	}

	float a = d / inLight.Range;
	a = 1.0 - a;
	a = a * a;

	return a * inLight.Intensity;
};
