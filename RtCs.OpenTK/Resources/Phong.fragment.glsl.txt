#version 460

#include "BuiltIn.h"

out vec4 outColor;

layout (location = 0) uniform vec3 inAmbient;
layout (location = 1) uniform vec3 inDiffuse;
layout (location = 2) uniform vec3 inSpecular;
layout (location = 3) uniform vec3 inEmission;
layout (location = 4) uniform float inShininess;

layout (location = 0) in vec3 inNormal;
layout (location = 1) in vec3 inWorldSpaceNormal;
layout (location = 2) in vec3 inWorldSpacePosition;

void main()
{
    // ambient
    GLAmbientLight ambLight = GetAmbientLight();
    vec3 ambient = inAmbient * (ambLight.Color.xyz * ambLight.Intensity);

    // diffuse and specular
    vec3 diffuse = vec3(0.0);
    vec3 specular = vec3(0.0);

    for (int i = 0; i < DirectionalLightCount; ++i) {
        GLDirectionalLight light = GetDirectionalLight(i);

        float d = max(dot(inWorldSpaceNormal, -light.Direction), 0.0);
        diffuse += inDiffuse * light.Color * light.Intensity * d;

        if (d > 0.0) {
            vec3 halfVec = normalize(-WorldViewDirection.xyz - light.Direction);
            float s = pow(max(dot(inWorldSpaceNormal, halfVec), 0.0), inShininess);
            specular += inSpecular * light.Color * light.Intensity * s;
        }
    }

    for (int i = 0; i < PointLightCount; ++i) {
        GLPointLight light = GetPointLight(i);

        vec3 direction = inWorldSpacePosition - light.Position;
        if (length(direction) > 1.0e-5) {
            direction = normalize(direction);
            float intensity = PointLightIntensityAt(light, inWorldSpacePosition);

            float d = max(dot(inWorldSpaceNormal, -direction), 0.0);
            diffuse += inDiffuse * light.Color * intensity * d;

            if (d > 0.0) {
                vec3 halfVec = normalize(-WorldViewDirection.xyz - direction);
                float s = pow(max(dot(inWorldSpaceNormal, halfVec), 0.0), inShininess);
                specular += inSpecular * light.Color * intensity * s;
            }
        }
    }

    for (int i = 0; i < SpotLightCount; ++i) {
        GLSpotLight light = GetSpotLight(i);

        float intensity = SpotLightIntensityAt(light, inWorldSpacePosition);

        float d = max(dot(inWorldSpaceNormal, -light.Direction), 0.0);
        diffuse += inDiffuse * light.Color * intensity * d;

        if (d > 0.0) {
            vec3 halfVec = normalize(-WorldViewDirection.xyz - light.Direction);
            float s = pow(max(dot(inWorldSpaceNormal, halfVec), 0.0), inShininess);
            specular += inSpecular * light.Color * intensity * s;
        }
    }

    // emission
    vec3 emission = inEmission;

    vec3 color = ambient
               + diffuse
               + specular
               + emission;

    outColor = vec4(color, 1.0);
    return;
}